map{
    math -> dae.fxcreator.node.graphmath.MathFormula;
    operation -> dae.fxcreator.node.graphmath.BinaryMathElement;
    operation -> dae.fxcreator.node.graphmath.UnaryMathElement;
    value ->    dae.fxcreator.node.graphmath.MathFloatValue;
    value ->    dae.fxcreator.node.graphmath.MathIntValue;
    value ->    dae.fxcreator.node.graphmath.MathVariable;
    io ->       dae.fxcreator.node.ShaderInput;
    io ->       dae.fxcreator.node.ShaderOutput;
}

template project{
    code main {
        << "<?xml version='1.0' encoding='utf_8' ?>\n"
        << "<!-- test of the export of :" << node.id << "-->\n";
        << "<controllers>\n";
        << "\t<!-- This is a list of behaviours -->\n";
        << "\t<!--\"It is during our darkest moments that we must focus to see the light.\" - Aristotle -->\n";

        for ( n : node.stages ){
            << "\t<behaviour name='" <<  n.name << "'/>\n";
            call(n,"definition");
            << "\t</behaviour>\n";
        }
        << "</controllers>\n";
        writeBufferToStream("default","default");
    }
}

template shaderstage{
    code definition{
        << "\t\t<!-- This is the list of inputs: \n";
        for(input : node.inputs){
            << "\t\t\t" << input.name << "\n";
        }
        << "\t\t -->\n";

        << "\t\t<!-- This is the list of outputs: \n";
        for(output : node.outputs){
            << "\t\t\t" << output.name << "\n";
        }
        << "\t\t -->\n";

        for( n : node.nodes ){
            call(n, "definition");
        }
    }
}

template node{
    code definition[joint.revolutejoint] {
        << "\t\t<!--" << "definition for " << node.id << "-->\n";
        << "\t\t<joint name='" << node.id << ">\n";
        << "\t\t<!-- This is the list of outputs: \n";
        for(output : node.outputs){
            << "\t\t\t" << output.name << " connected status: " <<output.connected << "\n";
        }
        << "\t\t\t" << $position.ref << " is connected " << $position.connected << "\n";
        << "\t\t\t" << $axis.ref << " is connected " << $axis.connected << "\n";
        << "\t\t\t" << "The ui style is :" << node[UI.style] << "\n";
        << "\t\t -->\n";
        << "\t\t</joint>\n";
    }

    code connection[joint.revolutejoint]{
        
    }

    code definition[metrics.math]{
        << "\t\t\t<!-- Calling metric.math template -->\n" ;
        << "\t\t\t<!-- The code is :" << node[Value.math] << "-->\n";
        push( "mathnode",node);
        call(node[Value.math],"main");
        << "\t\t\t<!-- End of metrics.math template -->\n" ;
        pop("mathnode");
    }
}

template math{
    code main{
        << "\t\t\t// math node :" << mathnode.name << "\n";
        
        for ( n : node.roots ){
            << "\t\t\t root\n";
            call(n,"formula");
        }
    }
}
template operation{

    code formula{
        call(node.first,"formula");
        << " " << node.operation << " "; 
        call(node.second,"formula");
    }

    code formula[binary.ASSIGN]{
        call(node.first,"formula");
        << " = "; 
        call(node.second,"formula");
        << ";\n";
    }
}

template value{
    code formula[value.INT]{
        << node.value;
    }
    
    code formula[value.FLOAT]{
       << " " << node.value  << " ";
    }

    code formula[value.VARNAME]{
        call(mathnode.port(node.varName), "reference");
    }
}

template io{
    code reference[node.input]{
        << node.var ;
    }

    code reference[node.output]{
        << node.var;
    }
}