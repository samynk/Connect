/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MathEditor.java
 *
 * Created on Jan 5, 2010, 3:45:42 PM
 */
package dae.fxcreator.node.graph.math;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.HierarchyEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.PlainDocument;

/**
 *
 * @author Koen
 */
public class MathEditor extends javax.swing.JPanel implements MathContext, HierarchyListener {

    private MathContainer root;
    private MathGUIElement current;
    private JEditorPane txtExport;
    private ArrayList<ChangeListener> changeListeners = new ArrayList<ChangeListener>();
    private String xmlRepresentation;
    private MathFormula currentFormula;

    /**
     * Creates new form MathEditor
     */
    public MathEditor() {
        initComponents();

        root = new MathContainer(this);
        root.setAsRootNode();
        root.setFocusTraversalPolicyProvider(true);
        //root.setMinimumSize(new Dimension(50, 50));
        //root.setPreferredSize(new Dimension(50, 50));
        root.addHierarchyListener(this);
        JScrollPane rootPane = new JScrollPane(root);
        rootPane.setOpaque(false);
        tabMath.addTab("math", rootPane);

        txtExport = new JEditorPane();
        tabMath.addTab("mathxml", new JScrollPane(txtExport));
        txtExport.getDocument().putProperty(PlainDocument.tabSizeAttribute, 2);

        MathField start = new MathField();
        root.addMathField(start);
        setCurrentElement(start);

        InputMap map = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        KeyStroke up = KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0, true);
        map.put(up, "up");

        ActionMap am = getActionMap();
        am.put("up", new AbstractAction() {
            public void actionPerformed(ActionEvent ae) {
                doUpAction();
            }
        });

        KeyStroke down = KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0, true);
        map.put(down, "down");

        am.put("down", new AbstractAction() {
            public void actionPerformed(ActionEvent ae) {
                doDownAction();
            }
        });

        KeyStroke delete = KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0, true);
        map.put(delete, "delete");

        am.put("delete", new AbstractAction() {
            public void actionPerformed(ActionEvent ae) {
                doDeleteAction();
            }
        });

        KeyStroke changeType = KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0, true);
        map.put(changeType, "changeType");

        am.put("changeType", new AbstractAction() {
            public void actionPerformed(ActionEvent ae) {
                doChangeTypeAction();
            }
        });

        //File file = new File("d:/projects/fxcreator/formula2.mfx");
        //MathLoader loader = new MathLoader(file);
        //loader.load();
        //MathFormula formula = loader.getFormula();
        //this.setMathFormula(formula);

        this.setMathFormula(createBasicEquation());
    }

    public void addChangeListener(ChangeListener cl) {
        changeListeners.add(cl);
    }

    public void removeChangeListener(ChangeListener cl) {
        changeListeners.remove(cl);
    }

    public void addInputVariables(String[] inputs) {
        this.cboInputs.setModel(new DefaultComboBoxModel(inputs));
    }

    public void addOutputVariables(String[] outputs) {
        this.cboOutputs.setModel(new DefaultComboBoxModel(outputs));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlToolbars = new javax.swing.JPanel();
        toolbarCommand = new javax.swing.JToolBar();
        btnEquals = new javax.swing.JButton();
        btnDivision = new javax.swing.JButton();
        btnSquareRoot = new javax.swing.JButton();
        btnPower = new javax.swing.JButton();
        btnPower2 = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnMinus = new javax.swing.JButton();
        btnProduct = new javax.swing.JButton();
        btnDot = new javax.swing.JButton();
        btnCross = new javax.swing.JButton();
        btnLength = new javax.swing.JButton();
        btnBrackets = new javax.swing.JButton();
        toolbarFunctions = new javax.swing.JToolBar();
        btnCosinus = new javax.swing.JButton();
        btnSinus = new javax.swing.JButton();
        btnTangens = new javax.swing.JButton();
        btnMax = new javax.swing.JButton();
        btnStep = new javax.swing.JButton();
        btnAtan = new javax.swing.JButton();
        btnAtan2 = new javax.swing.JButton();
        toolbarConstants = new javax.swing.JToolBar();
        btnPi = new javax.swing.JButton();
        btnE = new javax.swing.JButton();
        pnlCode = new javax.swing.JPanel();
        scrTextPane = new javax.swing.JScrollPane();
        txtCodePane = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        btnAddInput = new javax.swing.JButton();
        cboInputs = new javax.swing.JComboBox();
        btnAddOutput = new javax.swing.JButton();
        cboOutputs = new javax.swing.JComboBox();
        btnAddFormula = new javax.swing.JButton();
        btnRemoveFormula = new javax.swing.JButton();
        scrVariables = new javax.swing.JScrollPane();
        tabMath = new javax.swing.JTabbedPane();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        pnlToolbars.setLayout(new java.awt.GridLayout(2, 0));

        toolbarCommand.setRollover(true);

        btnEquals.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/equals.png"))); // NOI18N
        btnEquals.setToolTipText("assignment");
        btnEquals.setFocusable(false);
        btnEquals.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEquals.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEqualsActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnEquals);

        btnDivision.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/division.png"))); // NOI18N
        btnDivision.setToolTipText("division");
        btnDivision.setFocusable(false);
        btnDivision.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDivision.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDivision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDivisionActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnDivision);

        btnSquareRoot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/sqrt.png"))); // NOI18N
        btnSquareRoot.setToolTipText("square root");
        btnSquareRoot.setFocusable(false);
        btnSquareRoot.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSquareRoot.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSquareRoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSquareRootActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnSquareRoot);

        btnPower.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/power.png"))); // NOI18N
        btnPower.setToolTipText("power");
        btnPower.setFocusable(false);
        btnPower.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPower.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPowerActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnPower);

        btnPower2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/power2.png"))); // NOI18N
        btnPower2.setFocusable(false);
        btnPower2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPower2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPower2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPower2ActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnPower2);

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/add.png"))); // NOI18N
        btnAdd.setToolTipText("addition");
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnAdd);

        btnMinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/minus.png"))); // NOI18N
        btnMinus.setToolTipText("subtraction");
        btnMinus.setFocusable(false);
        btnMinus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMinus.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinusActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnMinus);

        btnProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/product.png"))); // NOI18N
        btnProduct.setToolTipText("product");
        btnProduct.setFocusable(false);
        btnProduct.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnProduct.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnProduct);

        btnDot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/dot.png"))); // NOI18N
        btnDot.setToolTipText("dot product");
        btnDot.setFocusable(false);
        btnDot.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDot.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDotActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnDot);

        btnCross.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/cross.png"))); // NOI18N
        btnCross.setToolTipText("cross product");
        btnCross.setFocusable(false);
        btnCross.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCross.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrossActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnCross);

        btnLength.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/length.png"))); // NOI18N
        btnLength.setFocusable(false);
        btnLength.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLength.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLengthActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnLength);

        btnBrackets.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dae/images/math/brackets.png"))); // NOI18N
        btnBrackets.setFocusable(false);
        btnBrackets.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBrackets.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnBrackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBracketsActionPerformed(evt);
            }
        });
        toolbarCommand.add(btnBrackets);

        pnlToolbars.add(toolbarCommand);

        toolbarFunctions.setRollover(true);

        btnCosinus.setText("cos");
        btnCosinus.setFocusable(false);
        btnCosinus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCosinus.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCosinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCosinusActionPerformed(evt);
            }
        });
        toolbarFunctions.add(btnCosinus);

        btnSinus.setText("sin");
        btnSinus.setFocusable(false);
        btnSinus.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSinus.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSinusActionPerformed(evt);
            }
        });
        toolbarFunctions.add(btnSinus);

        btnTangens.setText("tan");
        btnTangens.setFocusable(false);
        btnTangens.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTangens.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTangens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTangensActionPerformed(evt);
            }
        });
        toolbarFunctions.add(btnTangens);

        btnMax.setText("max");
        btnMax.setFocusable(false);
        btnMax.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMax.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaxActionPerformed(evt);
            }
        });
        toolbarFunctions.add(btnMax);

        btnStep.setText("step");
        btnStep.setFocusable(false);
        btnStep.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnStep.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStepActionPerformed(evt);
            }
        });
        toolbarFunctions.add(btnStep);

        btnAtan.setText("atan");
        btnAtan.setFocusable(false);
        btnAtan.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAtan.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAtan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtanActionPerformed(evt);
            }
        });
        toolbarFunctions.add(btnAtan);

        btnAtan2.setText("atan2");
        btnAtan2.setFocusable(false);
        btnAtan2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAtan2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAtan2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtan2ActionPerformed(evt);
            }
        });
        toolbarFunctions.add(btnAtan2);

        toolbarConstants.setRollover(true);
        toolbarFunctions.add(toolbarConstants);

        btnPi.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnPi.setText("π");
        btnPi.setFocusable(false);
        btnPi.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPi.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPiActionPerformed(evt);
            }
        });
        toolbarFunctions.add(btnPi);

        btnE.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnE.setText("e");
        btnE.setFocusable(false);
        btnE.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnE.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbarFunctions.add(btnE);

        pnlToolbars.add(toolbarFunctions);

        add(pnlToolbars, java.awt.BorderLayout.NORTH);

        pnlCode.setLayout(new java.awt.BorderLayout());

        txtCodePane.setEnabled(false);
        scrTextPane.setViewportView(txtCodePane);

        pnlCode.add(scrTextPane, java.awt.BorderLayout.CENTER);

        btnAddInput.setText("<html>&uarr;</html>");
        btnAddInput.setToolTipText("Set the input variable in the current field");
        btnAddInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInputActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddInput);

        cboInputs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ivar1", "ivar2", " " }));
        jPanel1.add(cboInputs);

        btnAddOutput.setText("<html>&uarr;</html>");
        btnAddOutput.setToolTipText("Set the input variable in the current field");
        btnAddOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOutputActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddOutput);

        cboOutputs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ovar1", "ovar2" }));
        jPanel1.add(cboOutputs);

        btnAddFormula.setText("+");
        btnAddFormula.setToolTipText("Add a formula");
        btnAddFormula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFormulaActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddFormula);

        btnRemoveFormula.setText("-");
        btnRemoveFormula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFormulaActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemoveFormula);

        pnlCode.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        add(pnlCode, java.awt.BorderLayout.PAGE_END);
        add(scrVariables, java.awt.BorderLayout.LINE_START);
        add(tabMath, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDivisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDivisionActionPerformed
        // TODO add your handling code here:

        if (current != null && !current.isLocked()) {
            MathContainer parent = current.getParentContainer();
            if (parent != null) {
                DivideMathContainer mc = new DivideMathContainer(this);
                parent.replaceField(current, mc);
                mc.addDividendElement(current);
                MathField denumerator = new MathField();
                mc.addDivisorElement(denumerator);

                setCurrentElement(mc);
                updateLayout();
                structureChanged();
            }
        }
    }//GEN-LAST:event_btnDivisionActionPerformed

    private void btnSquareRootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSquareRootActionPerformed
        // TODO add your handling code here:
        if (current != null && !current.isLocked()) {
            MathContainer parent = current.getParentContainer();
            if (parent != null) {
                SQRTMathContainer panel = new SQRTMathContainer(this);
                parent.replaceField(current, panel);
                panel.addMathField(current);
                setCurrentElement(panel);
                updateLayout();
                structureChanged();
            }
        }

    }//GEN-LAST:event_btnSquareRootActionPerformed

    private void btnEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEqualsActionPerformed
        addBinaryOperation("=", false);
        structureChanged();
    }//GEN-LAST:event_btnEqualsActionPerformed

    private void btnPowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPowerActionPerformed
        addPower("");
    }//GEN-LAST:event_btnPowerActionPerformed

    private void addPower(String power) {
        if (current != null && !current.isLocked()) {

            MathContainer parent = current.getParentContainer();
            if (parent != null) {
                PowerMathContainer container = new PowerMathContainer(this);
                parent.replaceField(current, container);

                container.addPowerElement(new MathField(power));
                container.addBaseElement(current);

                parent.invalidate();
                container.invalidate();

                setCurrentElement(container);
                updateLayout();
                structureChanged();
            }
        }
    }

    private void addOperation(String operation) {
        if (current != null && !current.isLocked()) {
            MathContainer parent = current.getParentContainer();
            if (parent != null) {
                if (current instanceof MultipleOperandMathContainer) {
                    MultipleOperandMathContainer momc = (MultipleOperandMathContainer) current;
                    momc.addOperand(operation);
                    momc.addMathField(new MathField());
                    parent.invalidate();
                    momc.invalidate();
                    updateLayout();
                    setCurrentElement(momc);
                } else if (parent instanceof MultipleOperandMathContainer) {
                    MultipleOperandMathContainer momc = (MultipleOperandMathContainer) parent;
                    momc.addElementsAfter(current, operation, new MathField());

                    parent.invalidate();
                    momc.invalidate();
                    updateLayout();
                    setCurrentElement(momc);
                } else {
                    MultipleOperandMathContainer momc = new MultipleOperandMathContainer(this);
                    parent.replaceField(current, momc);
                    momc.addMathField(current);
                    momc.addOperand(operation);
                    momc.addMathField(new MathField());
                    parent.invalidate();
                    momc.invalidate();
                    updateLayout();
                    setCurrentElement(momc);
                }
                structureChanged();
            }
        }
    }

    private void addBinaryOperation(String operator, boolean useBrackets) {
        MathContainer parent = current.getParentContainer();
        if (current.isLocked())
            return;
        if (parent != null) {
            OperatorMathContainer container = new OperatorMathContainer(operator, this);
            container.setShowBrackets(useBrackets);
            parent.replaceField(current, container);
            container.addRightElement(new MathField());
            container.addLeftElement(current);

            parent.invalidate();
            container.invalidate();

            setCurrentElement(container);
            updateLayout();
            structureChanged();
        }
    }

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        addOperation("+");

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinusActionPerformed
        // TODO add your handling code here:
        addOperation("-");
    }//GEN-LAST:event_btnMinusActionPerformed

    private void btnProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductActionPerformed
        // TODO add your handling code here:
        addOperation("*");
    }//GEN-LAST:event_btnProductActionPerformed

    private void btnDotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDotActionPerformed
        // TODO add your handling code here:
        addBinaryOperation(".", true);
    }//GEN-LAST:event_btnDotActionPerformed

    private void btnCrossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrossActionPerformed
        // TODO add your handling code here:
        addBinaryOperation("x", true);
    }//GEN-LAST:event_btnCrossActionPerformed

    private void btnLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLengthActionPerformed
        // TODO add your handling code here:
        if (current != null && !current.isLocked()) {
            MathContainer parent = current.getParentContainer();
            if (parent != null) {
                GroupMathContainer container = new GroupMathContainer(this, GroupType.ABS.LENGTH);
                parent.replaceField(current, container);
                container.addMathField(current);
                setCurrentElement(container);
                updateLayout();
            }
        }
    }//GEN-LAST:event_btnLengthActionPerformed

    private void btnBracketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBracketsActionPerformed
        // TODO add your handling code here:
        if (current != null && !current.isLocked()) {
            MathContainer parent = current.getParentContainer();
            if (parent != null) {
                GroupMathContainer container = new GroupMathContainer(this, GroupType.ABS.GROUP);
                parent.replaceField(current, container);
                container.addMathField(current);
                setCurrentElement(container);
                updateLayout();
            }
        }
    }//GEN-LAST:event_btnBracketsActionPerformed

    private void btnCosinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCosinusActionPerformed
        // TODO add your handling code here:
        addFunction("cos", 1);
    }//GEN-LAST:event_btnCosinusActionPerformed

    private void btnSinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSinusActionPerformed
        // TODO add your handling code here:
        addFunction("sin", 1);
    }//GEN-LAST:event_btnSinusActionPerformed

    private void btnTangensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTangensActionPerformed
        // TODO add your handling code here:
        addFunction("tan", 1);
    }//GEN-LAST:event_btnTangensActionPerformed

    private void btnMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaxActionPerformed
        // TODO add your handling code here:
        addFunction("max", 2);
    }//GEN-LAST:event_btnMaxActionPerformed

    private void btnStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStepActionPerformed
        // TODO add your handling code here:
        addFunction("step", 2);
    }//GEN-LAST:event_btnStepActionPerformed

    private void btnAtanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtanActionPerformed
        // TODO add your handling code here:
        addFunction("atan", 1);
    }//GEN-LAST:event_btnAtanActionPerformed

    private void btnAtan2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtan2ActionPerformed
        // TODO add your handling code here:
        addFunction("atan2", 2);
    }//GEN-LAST:event_btnAtan2ActionPerformed

    private void btnPiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPiActionPerformed
        // TODO add your handling code here:
        if (current instanceof MathField) {
            ((MathField) current).setText("π");
        }
    }//GEN-LAST:event_btnPiActionPerformed

    private void btnPower2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPower2ActionPerformed
        // TODO add your handling code here:
        addPower("2");
    }//GEN-LAST:event_btnPower2ActionPerformed

    private void btnAddInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInputActionPerformed
        // TODO add your handling code here:
        if (current instanceof MathField) {
            MathField mf = (MathField) current;
            mf.setText(cboInputs.getSelectedItem().toString());

        }
    }//GEN-LAST:event_btnAddInputActionPerformed

    private void btnAddOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOutputActionPerformed
        // TODO add your handling code here:
        if (current instanceof MathField) {
            MathField mf = (MathField) current;
            mf.setText(cboOutputs.getSelectedItem().toString());
        }
    }//GEN-LAST:event_btnAddOutputActionPerformed

    private MathFormula createBasicEquation() {
        MathFormula newFormula = new MathFormula();
        MathVariable left = new MathVariable();
        if (cboOutputs.getSelectedItem() != null) {
            left.setVarName(cboOutputs.getSelectedItem().toString());
        } else {
            left.setVarName("out");
        }
        left.setLocked();

        MathVariable right = new MathVariable();
        right.setVarName("1");

        BinaryMathElement equals = new BinaryMathElement();
        equals.setFirstElement(left);
        equals.setOperation(new Operation("="));
        equals.setSecondElement(right);

        newFormula.addRoot(equals);
        return newFormula;
    }

    private void btnAddFormulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFormulaActionPerformed
        // TODO add your handling code here:
        this.addMathFormula(createBasicEquation());
    }//GEN-LAST:event_btnAddFormulaActionPerformed

    private void btnRemoveFormulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFormulaActionPerformed
        // TODO add your handling code here:
        // remove the top level element of the current math element.
        root.removeAncestorOf(current);
    }//GEN-LAST:event_btnRemoveFormulaActionPerformed

    private BufferedImage createImage() {
        int width = 0;
        int height = 0;
        for (Component c : root.getComponents()) {
            Dimension d = c.getPreferredSize();

            height += d.height + 5; // spacing
            if (d.width > width) {
                width = d.width;
            }
        }

        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = bi.createGraphics();
        g.setColor(new Color(0, 0, 0, 0.8f));
        g.fillRect(0, 0, width, height);
        int y = 0;
        for (Component c : root.getComponents()) {
            Dimension d = c.getPreferredSize();
            int x = (width - d.width) / 2;
            g.translate(x, y);
            c.print(g);
            g.translate(-x, -y);
            y += d.height + 5;
        }
        return bi;
    }

    private void addFunction(String function, int nrOfArguments) {
        if (current != null && !current.isLocked()) {
            MathContainer parent = current.getParentContainer();
            if (parent != null) {
                FunctionMathContainer fmc = new FunctionMathContainer(this, function, nrOfArguments);
                parent.replaceField(current, fmc);
                fmc.setFirstParameter(current);
                setCurrentElement(fmc);
                updateLayout();
                structureChanged();
            }
        }
    }

    private void doChangeTypeAction() {
        if (current instanceof MathField) {
            MathField mf = (MathField) current;
            mf.toggleIsVector();
            root.updateLayout();
            repaint();
        }
    }

    public void updateLayout() {
        root.updateLayout();
        repaint();
    }

    public static void main(String[] args) {


        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    LookAndFeelInfo[] lfs = UIManager.getInstalledLookAndFeels();
                    for (LookAndFeelInfo lf : lfs) {
                        System.out.println(lf.getClassName());
                    }
                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");

                    //UIManager.put("Panel.background", Color.darkGray);
                    UIManager.put("Label.foreground", Color.white);

                    UIManager.put("TaskPaneContainer.useGradient", Boolean.FALSE);
                    UIManager.put("TaskPaneContainer.background", Color.gray);
                    //UIManager.put("TaskPaneContainer.backgroundGradientStart",Color.gray);
                    //UIManager.put("TaskPaneContainer.backgroundGradientEnd",Color.darkGray);

                    UIManager.put("TaskPane.titleBackgroundGradientStart", Color.gray);
                    UIManager.put("TaskPane.titleBackgroundGradientEnd", Color.darkGray);
                    UIManager.put("TaskPane.titleForeground", Color.white);
                    UIManager.put("TaskPane.titleForegroundSpecial", Color.PINK);

                    
                    UIManager.put("TaskPaneContainer.background", Color.darkGray);
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(MathEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
                JFrame frame = new JFrame("Math test");
                frame.setSize(new Dimension(400, 300));
                frame.setLocation(new Point(200, 200));
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.getContentPane().add(new MathEditor());
                frame.setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddFormula;
    private javax.swing.JButton btnAddInput;
    private javax.swing.JButton btnAddOutput;
    private javax.swing.JButton btnAtan;
    private javax.swing.JButton btnAtan2;
    private javax.swing.JButton btnBrackets;
    private javax.swing.JButton btnCosinus;
    private javax.swing.JButton btnCross;
    private javax.swing.JButton btnDivision;
    private javax.swing.JButton btnDot;
    private javax.swing.JButton btnE;
    private javax.swing.JButton btnEquals;
    private javax.swing.JButton btnLength;
    private javax.swing.JButton btnMax;
    private javax.swing.JButton btnMinus;
    private javax.swing.JButton btnPi;
    private javax.swing.JButton btnPower;
    private javax.swing.JButton btnPower2;
    private javax.swing.JButton btnProduct;
    private javax.swing.JButton btnRemoveFormula;
    private javax.swing.JButton btnSinus;
    private javax.swing.JButton btnSquareRoot;
    private javax.swing.JButton btnStep;
    private javax.swing.JButton btnTangens;
    private javax.swing.JComboBox cboInputs;
    private javax.swing.JComboBox cboOutputs;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnlCode;
    private javax.swing.JPanel pnlToolbars;
    private javax.swing.JScrollPane scrTextPane;
    private javax.swing.JScrollPane scrVariables;
    private javax.swing.JTabbedPane tabMath;
    private javax.swing.JToolBar toolbarCommand;
    private javax.swing.JToolBar toolbarConstants;
    private javax.swing.JToolBar toolbarFunctions;
    private javax.swing.JTextPane txtCodePane;
    // End of variables declaration//GEN-END:variables

    public void keyTyped(KeyEvent e) {
    }

    public void keyPressed(KeyEvent e) {
    }

    public void doUpAction() {
        if (current.getParentContainer() != null) {
            setCurrentElement(current.getParentContainer());
        }
    }

    public void doDownAction() {
        if (current instanceof MathContainer) {
            MathContainer container = (MathContainer) current;
            setCurrentElement(container.getFirstChild());
        }
    }

    /**
     * Only possible to delete containers. Delete removes the container and its
     * children from the hierarchy and replaces the container with a mathfield.
     */
    public void doDeleteAction() {
        if (current instanceof MathContainer) {
            MathContainer parent = current.getParentContainer();
            MathField replacement = new MathField("a");
            if (current instanceof MathContainer) {
                MathContainer mc = (MathContainer) current;
                if (mc.getFirstChild() != null) {
                    parent.replaceField(current, mc.getFirstChild());
                    setCurrentElement(mc.getFirstChild());
                } else {
                    parent.replaceField(current, replacement);
                    setCurrentElement(replacement);
                }
            } else {
                parent.replaceField(current, replacement);
                setCurrentElement(replacement);
            }
            parent.invalidate();
            this.updateLayout();
            createXML();
            structureChanged();
        }
    }

    public final void setCurrentElement(MathGUIElement element) {
        if (element == root) {
            return;
        }
        if (current != null) {
            current.setSelected(false);
        }
        this.current = element;
        if (current != null) {
            current.setSelected(true);
        }

        StringBuffer code = new StringBuffer();
        this.root.convertToCode(code);
        txtCodePane.setText(code.toString());

        structureChanged();
    }

    public String getAsXML() {
        return xmlRepresentation;
    }

    public MathGUIElement getCurrentElement() {
        return current;
    }

    private void createXML() {
        StringBuffer sb = new StringBuffer();
        currentFormula = new MathFormula();
        sb.append("<mathformula>\n");
        for (MathGUIElement elem : root.getMathElements()) {
            MathElement me = elem.createFormula();
            currentFormula.addRoot(me);
            me.writeToXML(sb, 1);
        }
        sb.append("</mathformula>\n");
        xmlRepresentation = sb.toString();
        txtExport.setText(xmlRepresentation);
    }

    @Override
    public void elementChanged(MathGUIElement element) {
        //root.revalidate();
        //root.doLayout();
        ((Component) element).invalidate();
        root.updateLayout();
        //((Component)element).validate();
        StringBuffer code = new StringBuffer();
        this.root.convertToCode(code);
        txtCodePane.setText(code.toString());

        structureChanged();
    }

    @Override
    public void hierarchyChanged(HierarchyEvent e) {
        //System.out.println("hierarchy changed");
        root.updateLayout();
    }

    public void setMathFormula(MathFormula formula) {
        if (formula != null && formula != currentFormula) {

            this.root.removeAll();
            for (MathElement elem : formula.getRoots()) {
                elem.setLocked();
                createElement(root, elem);
            }
            currentFormula = formula;

            ChangeEvent ce = new ChangeEvent(this);
            for (ChangeListener cl : this.changeListeners) {
                cl.stateChanged(ce);
            }
            root.updateLayout();
        }
        createXML();
    }

    public MathFormula getMathFormula() {
        return currentFormula;
    }

    public void addMathFormula(MathFormula formula) {
        for (MathElement elem : formula.getRoots()) {
            elem.setLocked();
            createElement(root, elem);

        }
        createXML();
    }

    public void createElement(MathContainer parent, MathElement current) {
        MathGUIElement created = null;
        if (current instanceof UnaryMathElement) {
            UnaryMathElement ume = (UnaryMathElement) current;
            String operator = ume.getOperation().getText();
            if ("SQRT".equals(operator)) {
                SQRTMathContainer sqrt = new SQRTMathContainer(this);
                parent.addMathField(sqrt);
                createElement(sqrt, ume.getChild());
                created = sqrt;
            } else if ("LENGTH".equals(operator)) {
                GroupMathContainer gmc = new GroupMathContainer(this, GroupType.LENGTH);
                parent.addMathField(gmc);
                createElement(gmc, ume.getChild());
                created = gmc;
            } else if ("GROUP".equals(operator)) {
                GroupMathContainer gmc = new GroupMathContainer(this, GroupType.GROUP);
                parent.addMathField(gmc);
                createElement(gmc, ume.getChild());
                created = gmc;
            }
        } else if (current instanceof BinaryMathElement) {
            BinaryMathElement bme = (BinaryMathElement) current;
            String operator = bme.getOperation().getText();
            if ("/".equals(operator)) {
                DivideMathContainer dmc = new DivideMathContainer(this);
                parent.addMathField(dmc);
                createElement(dmc, bme.getFirstElement());
                createElement(dmc, bme.getSecondElement());
                created = dmc;
            } else if ("POWER".equals(operator)) {
                PowerMathContainer pmc = new PowerMathContainer(this);
                parent.addMathField(pmc);
                createElement(pmc, bme.getFirstElement());
                createElement(pmc, bme.getSecondElement());
                created = pmc;
            } else {
                OperatorMathContainer omc = new OperatorMathContainer(operator, this);
                parent.addMathField(omc);
                createElement(omc, bme.getFirstElement());
                createElement(omc, bme.getSecondElement());
                created = omc;
            }
        } else if (current instanceof FunctionMathElement) {
            FunctionMathElement fme = (FunctionMathElement) current;
            FunctionMathContainer fmc = new FunctionMathContainer(this, fme.getFunctionName(), fme.getNrOfArguments());
            parent.addMathField(fmc);
            for (MathElement me : fme.getMathElements()) {
                createElement(fmc, me);
            }
            created = fmc;
        } else if (current instanceof MultipleMathElement) {
            MultipleMathElement mme = (MultipleMathElement) current;
            MultipleOperandMathContainer momc = new MultipleOperandMathContainer(this);
            parent.addMathField(momc);
            for (int i = 0; i < mme.getNrOfOperands(); ++i) {
                createElement(momc, mme.getOperand(i));
                Operation op = mme.getOperation(i);
                if (op != null) {
                    momc.addOperand(op.getText());
                }
            }
            created = momc;
        } else if (current instanceof MathVariable) {
            MathVariable mv = (MathVariable) current;
            MathField mf = new MathField(mv.getVarName());
            mf.setIsVector(mv.isIsVector());
            mf.setMathContext(this);
            parent.addMathField(mf);
            created = mf;
        }
        if (created != null && current.isLocked()) {
            created.setLocked();
        }
        structureChanged();
    }

    private void structureChanged() {
        root.updateLayout();
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createXML();
                ChangeEvent ce = new ChangeEvent(this);
                for (Iterator<ChangeListener> it = changeListeners.iterator(); it.hasNext();) {
                    ChangeListener cl = it.next();
                    cl.stateChanged(ce);
                }
            }
        });

    }

    public Image getSnapShot() {
        return this.createImage();
    }
}
